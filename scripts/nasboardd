#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import NasBoard
import time

DEVS = [
        "/sys/devices/pci0000:00/0000:00:1c.1/0000:02:00.0/ata4/host3/target3:0:0",
        "/sys/devices/pci0000:00/0000:00:1c.1/0000:02:00.0/ata3/host2/target2:0:0",
        "/sys/devices/pci0000:00/0000:00:1c.1/0000:02:00.0/ata6/host5/target5:0:0",
        "/sys/devices/pci0000:00/0000:00:1c.1/0000:02:00.0/ata5/host4/target4:0:0",
        "/sys/devices/pci0000:00/0000:00:1c.1/0000:02:00.0/ata6/host5/target5:1:0",
        "/sys/devices/pci0000:00/0000:00:1c.1/0000:02:00.0/ata6/host5/target5:2:0",
        "/sys/devices/pci0000:00/0000:00:1c.1/0000:02:00.0/ata6/host5/target5:3:0",
        "/sys/devices/pci0000:00/0000:00:1c.1/0000:02:00.0/ata6/host5/target5:4:0"
        ]

MAX_OFF_COUNT = 300
OFF_COUNT = 0

def main():
    global OFF_COUNT 
    board = NasBoard.NasBoard()
    open_board(board)

    while True:
        try:
            #Power
            if not board.get_ac_stat():
                OFF_COUNT += 1

                if OFF_COUNT > MAX_OFF_COUNT:
                    os.system("sync")
                    os.system("systemctl poweroff")

            else:
                OFF_COUNT = 0

            refresh_dev(board)

            time.sleep(1)

        except Exception as e:
            print(e)
            open_board(board)

    return 0

def open_board(b):
    try:
        b.close()

    except Exception:
        pass

    while True:
        try:
            b.open()
            return

        except Exception:
            pass

def get_dev_map():
    devs = os.listdir("/sys/block/")
    ret = {}

    for d in devs:
        path = os.path.join("/sys/block/", d)
        if os.path.islink(path):
            target = os.path.realpath(path)
            for i in range(0, len(DEVS)):
                if DEVS[i] in target:
                    ret[d] = i
                    break

    return ret

def refresh_dev(board):
    dev_dict = get_dev_map()
    online_devs = get_online_dev()
    board.clear()
    for k in dev_dict.keys():
        if k in online_devs:
            board.light_on(board.GREEN, dev_dict[k])

        else:
            board.light_on(board.RED, dev_dict[k])

def get_online_dev():
    p = os.popen("zpool status")
    s = p.read()
    p.close()
    lines = []
    for l in s.split("\n"):
        l = l.strip()

        if "ata" in l.lower():  
            lines.append(l)

    ret = []

    for l in lines:
        infos = l.split()
        dev = os.path.basename(
                os.path.realpath(
                    os.path.join("/dev/disk/by-id", infos[0])))

        if infos[1].lower() == "online":
            ret.append(dev)

    return ret

exit(main())
